#ifndef NABLA_CODE_GEN_HPP
#define NABLA_CODE_GEN_HPP

#include <string>
#include <vector>
#include <map>

#include "nhll.hpp"
#include "nhll_driver.hpp"

#include "LibManifest.hpp"

#include <libnabla/projectfs.hpp>
#include <libnabla/scopetree.hpp>

namespace NHLL
{
    //! \brief Code generator - Generated byte code
    class CodeGen
    {
    public:
        //! \brief Construct a CodeGen
        CodeGen();

        //! \brief Deconstruct a CodeGen
        ~CodeGen();

        bool start_function(std::string name, std::vector<FunctionParam> params,  DataPrims return_type);


    private:

        enum class GenState
        {
            IDLE,
            BUILD_FUNCTION,
            END_FUNCTION
        };

        GenState state;

        // A Variable
        struct Variable
        {
            // Name stored as key in map
            std::string definition; // Definition
            NHLL::DataPrims type;   // Type
            bool isExpression;      // Definition is an expression if true
        };

        // Function representation
        struct FunctionRepresentation
        {
            FunctionRepresentation(std::string name, 
                                   std::vector<NHLL::FunctionParam> parameters, 
                                   NHLL::DataPrims return_type) : 
                                   name(name),
                                   parameters(parameters),
                                   return_type(return_type) {}

            // Name of the function
            std::string name;

            // Expected parameters
            std::vector<NHLL::FunctionParam> parameters;

            // Return type
            NHLL::DataPrims return_type;

            // Function variables
            // Vector.end() is the current scope. Temporary scopes will be removed post-processing
            // Vector used to determing if variable is accessable
            std::vector< std::map<std::string, Variable> > scoped_variable_map;

            // Bytecode for function
            std::vector<uint8_t> bytes;
        };

        // Generated functions
        std::vector<FunctionRepresentation> functions;

        enum class VariablePollResult
        {
            OKAY,
            INVALID_TYPE,
            OUT_OF_SCOPE,
            NOT_FOUND
        };

        VariablePollResult check_variable_access(std::string name, Variable & definition);

        std::string state_to_string(CodeGen::GenState state) const;

    };
}

#endif